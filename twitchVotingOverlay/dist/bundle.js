!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var o=function(){function e(){this.handlers=[]}return e.prototype.addEventListener=function(e){this.handlers.push(e)},e.prototype.removeEventListener=function(e){this.handlers=this.handlers.filter((function(t){return t!==e}))},e.prototype.dispatch=function(e){this.handlers.slice(0).forEach((function(t){return t(e)}))},e}(),r=function(){function e(e){this.createEvent=new o,this.updateEvent=new o,this.WS=null,this.URL=e,this.onSocketClose=this.onSocketClose.bind(this),this.onSocketError=this.onSocketError.bind(this),this.onSocketMessage=this.onSocketMessage.bind(this),this.onSocketOpen=this.onSocketOpen.bind(this),this.connect()}return e.prototype.addCreateVoteListener=function(e){this.createEvent.addEventListener(e)},e.prototype.addUpdateVoteListener=function(e){this.updateEvent.addEventListener(e)},e.prototype.removeCreateVoteListener=function(e){this.createEvent.removeEventListener(e)},e.prototype.removeUpdateVoteListener=function(e){this.updateEvent.removeEventListener(e)},e.prototype.connect=function(){try{this.WS=new WebSocket(this.URL),this.WS.addEventListener("close",this.onSocketClose),this.WS.addEventListener("error",this.onSocketError),this.WS.addEventListener("message",this.onSocketMessage),this.WS.addEventListener("open",this.onSocketOpen)}catch(e){}},e.prototype.onSocketError=function(e){console.log("error in socket occurred: "+e.message+". closing socket"),null!==this.WS&&this.WS.close()},e.prototype.onSocketClose=function(){var t=this;console.log("socket closed, reconnecting in "+e.RECONNECT_INTERVAL+"ms"),window.setTimeout((function(){return t.connect()}),e.RECONNECT_INTERVAL)},e.prototype.onSocketMessage=function(e){try{var t=JSON.parse(e.data);"CREATE"===t.request?this.createEvent.dispatch(t):"UPDATE"===t.request?this.updateEvent.dispatch(t):console.warn("unknown request type: "+t.request)}catch(e){console.error("failed to parse json data: "+e)}},e.prototype.onSocketOpen=function(){console.log("successfully connected to websocket")},e.RECONNECT_INTERVAL=1e3,e}(),i=function(){function e(t,n){this.bar=document.createElement("div"),this.barWrapper=document.createElement("div"),this.labelMatch=document.createElement("span"),this.labelWrapper=document.createElement("div"),this.labelText=document.createElement("span"),this.labelVotes=document.createElement("span"),this.bar.classList.add("bar"),this.barWrapper.classList.add("barWrapper"),this.labelWrapper.classList.add("labelWrapper"),this.matches=[],this.labelWrapper.append(this.labelMatch,this.labelText,this.labelVotes),this.barWrapper.append(this.labelWrapper),this.barWrapper.append(this.bar),this.bar.style.height=e.BAR_HEIGHT+"px",this.barWrapper.style.height=e.BAR_HEIGHT+"px",this.barWrapper.style.width=e.BAR_WIDTH+"px",this.label=t,this.votes=n}return e.prototype.getBarWrapper=function(){return this.barWrapper},Object.defineProperty(e.prototype,"label",{set:function(e){this.labelText.innerText=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"votes",{set:function(e){this.labelVotes.innerText=e.toString()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"barWidth",{set:function(e){this.bar.style.width=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"matches",{set:function(e){this.labelMatch.innerText=e.join("/")+"."},enumerable:!1,configurable:!0}),e.BAR_WIDTH=350,e.BAR_HEIGHT=30,e}(),s=[],a=0,c=document.getElementById("barContainer"),l=document.getElementById("totalVotes"),p=new r("ws://localhost:9091");function u(e){s.forEach((function(e){return e.getBarWrapper().remove()})),s=e.voteOptions.map((function(e){return new i(e.label,e.value.toString())})),function(){if(null===c)throw new Error("could not find bar container in DOM");c.append.apply(c,s.map((function(e){return e.getBarWrapper()})))}(),a=e.totalVotes,h()}function h(){if(null===l)throw new Error("could not find total votes in DOM");l.innerText="Total Votes: "+a.toString()}p.addCreateVoteListener(u),p.addUpdateVoteListener((function(e){var t=e.voteOptions,n=e.totalVotes;s.length!==t.length?(console.error("bar amount is not equal to vote options length, treating as new vote"),u(e)):(t.forEach((function(t,o){var r=s[o],a=n>0?i.BAR_WIDTH/n*t.value:0;if("PERCENTAGE"===e.votingMode){var c=void 0;c=0===n?0:Math.floor(t.value/n*100),r.votes=c+"%"}else r.votes=t.value.toString();r.barWidth=a+"px",r.matches=t.matches})),a=n,h())}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,